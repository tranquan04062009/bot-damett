import asyncio
import logging
import random
import os
import httpx
import pytz
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime

# Thay th·∫ø b·∫±ng token bot c·ªßa b·∫°n
TELEGRAM_BOT_TOKEN = "7550168223:AAHswDYG8ozk1QnpKSnxFo9UuNhYgCh6mco"
CHAT_ID = "-1002370805497"  # Thay b·∫±ng ID nh√≥m ho·∫∑c ng∆∞·ªùi nh·∫≠n video

# Kh·ªüi t·∫°o bot v√† dispatcher
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# API TikWM
API_URL = "https://www.tikwm.com/api/feed/search"
SEARCH_KEYWORDS = ["funny", "meme", "dance", "trend", "animal", "game", "food"]

async def get_random_tiktok():
    """ L·∫•y video TikTok ng·∫´u nhi√™n t·ª´ API """
    keyword = random.choice(SEARCH_KEYWORDS)
    params = {"keywords": keyword, "count": 5}
    
    async with httpx.AsyncClient() as client:
        response = await client.get(API_URL, params=params)
    
    if response.status_code == 200:
        data = response.json()
        if data.get("data"):
            videos = data["data"]
            video = random.choice(videos)  # Ch·ªçn ng·∫´u nhi√™n 1 video
            
            video_url = video["play"]
            title = video["title"]
            author = video["author"]
            music = video["music"]
            return video_url, title, author, music
    
    return None, None, None, None

async def download_video(video_url, filename):
    """ T·∫£i video v·ªÅ m√°y """
    async with httpx.AsyncClient() as client:
        response = await client.get(video_url)
        if response.status_code == 200:
            with open(filename, "wb") as f:
                f.write(response.content)
            return True
    return False

async def send_tiktok_video():
    """ T·∫£i video, g·ª≠i l√™n Telegram v√† x√≥a file """
    video_url, title, author, music = await get_random_tiktok()
    if not video_url:
        return await bot.send_message(CHAT_ID, "Kh√¥ng t√¨m th·∫•y video TikTok n√†o!")

    filename = "tiktok.mp4"
    if await download_video(video_url, filename):
        caption = f"üé• *Video TikTok*\nüìå *Ti√™u ƒë·ªÅ:* {title}\nüë§ *Ng∆∞·ªùi ƒëƒÉng:* {author}\nüéµ *Nh·∫°c:* {music}"
        await bot.send_video(CHAT_ID, open(filename, "rb"), caption=caption, parse_mode="Markdown")
        os.remove(filename)  # X√≥a video sau khi g·ª≠i
    else:
        await bot.send_message(CHAT_ID, "T·∫£i video th·∫•t b·∫°i!")

@dp.message_handler(commands=["randomtiktok"])
async def random_tiktok_command(message: Message):
    """ X·ª≠ l√Ω l·ªánh /randomtiktok """
    await send_tiktok_video()

# L√™n l·ªãch g·ª≠i video theo gi·ªù Vi·ªát Nam
vn_tz = pytz.timezone("Asia/Ho_Chi_Minh")
scheduler.add_job(send_tiktok_video, "cron", hour=7, minute=0, timezone=vn_tz)  # 7h s√°ng
scheduler.add_job(send_tiktok_video, "cron", hour=12, minute=0, timezone=vn_tz) # 12h tr∆∞a
scheduler.add_job(send_tiktok_video, "cron", hour=21, minute=0, timezone=vn_tz) # 9h t·ªëi
scheduler.start()

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)